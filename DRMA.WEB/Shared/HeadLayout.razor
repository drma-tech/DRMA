@using DRMA.WEB.Core
@inherits ComponentCore<HeadLayout>

@inject IJSRuntime JsRuntime

<Bar Mode="BarMode.Horizontal" Background="Background.Secondary" ThemeContrast="ThemeContrast.Dark" Padding="Padding.Is2">
    <Container Fluid="true" Padding="Padding.Is0.OnX">
        <BarBrand Display="Display.None.Block.OnDesktop" Padding="Padding.Is0">
            DRMA Tech
        </BarBrand>
        <BarMenu Style="flex-basis: unset !important;" Class="d-max-768-block d-min-768-contents">
            <BarStart Style="flex-flow: row;" Display="Display.None.Flex.Row.OnWidescreen">
                <BarItem Margin="Margin.Is2.FromEnd">
                    <BarLink To="/" Match="Match.All" Title="Home">
                        <BarIcon IconName="FontAwesomeIcons.Home" /> Home
                    </BarLink>
                </BarItem>
                <AuthorizeView Roles="administrator">
                    <Authorized>
                        <BarItem Margin="Margin.Is2.FromEnd">
                            <BarLink Clicked="@(()=>Navigation.NavigateTo("/administrator/drma", forceLoad: true))" Match="Match.All" Title="DRMA">
                                DRMA
                            </BarLink>
                        </BarItem>
                        <BarItem Margin="Margin.Is2.FromEnd">
                            <BarLink Clicked="@(()=>Navigation.NavigateTo("/administrator/sd", forceLoad: true))" Match="Match.All" Title="SD">
                                SD
                            </BarLink>
                        </BarItem>
                        <BarItem Margin="Margin.Is2.FromEnd">
                            <BarLink Clicked="@(()=>Navigation.NavigateTo("/administrator/mm", forceLoad: true))" Match="Match.All" Title="MM">
                                MM
                            </BarLink>
                        </BarItem>
                    </Authorized>
                </AuthorizeView>
            </BarStart>
            <Buttons Role="ButtonsRole.Toolbar" Float="Float.End" Size="Size.Small">
                <Button Color="Color.Dark" Clicked="ChangeTheme" Margin="Margin.Is1.FromEnd" Display="Display.None">
                    <Blazorise.Icon Name="@(Theme == "light" ? FontAwesomeIcons.Moon : FontAwesomeIcons.Sun)" />
                </Button>
                <AuthorizeView>
                    <Authorized>
                        <Button Color="Color.Danger" Clicked="Logout" title="Logout">
                            Logout
                        </Button>
                    </Authorized>
                    <NotAuthorized>
                        <Button Color="Color.Primary" Type="ButtonType.Link" To="/login-providers" title="Login">
                            Login
                        </Button>
                    </NotAuthorized>
                </AuthorizeView>
            </Buttons>
        </BarMenu>
    </Container>
</Bar>

@code {
    [SupplyParameterFromQuery][Parameter] public string? _ptxn { get; set; }
    [Parameter] public bool IsAuthenticated { get; set; } = false;

    public string? Theme { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Theme = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "theme");

            if (Theme.Empty())
            {
                await JsRuntime.InvokeVoidAsync("changeDarkMode");
                Theme = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "theme");
            }
        }
    }

    private void Logout()
    {
        Navigation.NavigateTo("/.auth/logout", forceLoad: true);
    }

    private async Task ChangeTheme()
    {
        await JsRuntime.InvokeVoidAsync("changeDarkMode");
        Theme = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "theme");
    }
}