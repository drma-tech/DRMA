@using Blazorise.DataGrid
@using DRMA.Shared.Models.Support
@using DRMA.WEB.Core
@using DRMA.WEB.Modules.Administrator.Core
@using DRMA.WEB.Modules.Auth.Core
@inherits ComponentCore<EmailComponent>
@attribute [Authorize(Roles = "administrator")]

@inject AdministratorApi AdministratorApi

<DataGrid TItem="EmailDocument" Data="@Emails.OrderByDescending(o=>o.DateTime)" @bind-SelectedRow="@Email" Responsive="true" ShowPager="true">
    <DataGridColumns>
        <DataGridColumn Field="@nameof(EmailDocument.SpamScore)" Caption="Spam">
            <DisplayTemplate>
                @{
                    var score = float.Parse(context.SpamScore ?? "0");
                    var report = context.SpamReport ?? "";
                }
                @if (score >= -0.1 && score <= 5)
                {
                    <Badge Color="Color.Warning" title="@report">@score</Badge>
                }
                else if (score < -0.1)
                {
                    <Badge Color="Color.Success" title="@report">@score</Badge>
                }
                else
                {
                    <Badge Color="Color.Danger" title="@report">@score</Badge>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(EmailDocument.FromEmail)" Caption="From" />
        <DataGridColumn Field="@nameof(EmailDocument.ToEmail)" Caption="To" />
        <DataGridColumn Field="@nameof(EmailDocument.ShortSubject)" Caption="Subject" />
        <DataGridDateColumn Field="@nameof(EmailDocument.Date)" Caption="Date"  />
        <DataGridCheckColumn Field="@nameof(EmailDocument.Read)" Caption="Read" />
        <DataGridCheckColumn Field="@nameof(EmailDocument.Replied)" Caption="Replied" />
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Success" Clicked="@(async()=>await NewClick())">New</Button>
        <Button Color="Color.Primary" Disabled="(Email is null)" Clicked="@(async()=>await ReadClick(context))">Read</Button>
    </ButtonRowTemplate>
</DataGrid>

@code {
    [Parameter] public string? product { get; set; }

    HashSet<EmailDocument> Emails = [];
    EmailDocument? Email;

    protected override async Task LoadDataRender()
    {
        Emails = await AdministratorApi.GetEmails(product);
    }

    private async Task NewClick()
    {
        await ModalService.OpenPopup<EmailPopup>(x => { x.Add(x => x.OnlyRead, false); x.Add(x => x.product, product); }, ModalSize.Large);
    }

    private async Task ReadClick(ButtonRowContext<EmailDocument> row)
    {
        await ModalService.OpenPopup<EmailPopup>(x => { x.Add(x => x.EmailDocument, row.EditCommand.Item); x.Add(x => x.product, product); }, ModalSize.Large);
    }
}
